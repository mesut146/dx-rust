use crate::helper;

struct Opcodes{
}
impl Opcodes{
    pub const SPECIAL_FORMAT: i32 = -1;
    pub const NO_NEXT: i32 = -1;
    pub const MIN_VALUE: i32 = -1;
    pub const MAX_VALUE: i32 = 0xffff;
    pub const NOP: i32 = 0x00;
    pub const MOVE: i32 = 0x01;
    pub const MOVE_FROM16: i32 = 0x02;
    pub const MOVE_16: i32 = 0x03;
    pub const MOVE_WIDE: i32 = 0x04;
    pub const MOVE_WIDE_FROM16: i32 = 0x05;
    pub const MOVE_WIDE_16: i32 = 0x06;
    pub const MOVE_OBJECT: i32 = 0x07;
    pub const MOVE_OBJECT_FROM16: i32 = 0x08;
    pub const MOVE_OBJECT_16: i32 = 0x09;
    pub const MOVE_RESULT: i32 = 0x0a;
    pub const MOVE_RESULT_WIDE: i32 = 0x0b;
    pub const MOVE_RESULT_OBJECT: i32 = 0x0c;
    pub const MOVE_EXCEPTION: i32 = 0x0d;
    pub const RETURN_VOID: i32 = 0x0e;
    pub const RETURN: i32 = 0x0f;
    pub const RETURN_WIDE: i32 = 0x10;
    pub const RETURN_OBJECT: i32 = 0x11;
    pub const CONST_4: i32 = 0x12;
    pub const CONST_16: i32 = 0x13;
    pub const CONST: i32 = 0x14;
    pub const CONST_HIGH16: i32 = 0x15;
    pub const CONST_WIDE_16: i32 = 0x16;
    pub const CONST_WIDE_32: i32 = 0x17;
    pub const CONST_WIDE: i32 = 0x18;
    pub const CONST_WIDE_HIGH16: i32 = 0x19;
    pub const CONST_STRING: i32 = 0x1a;
    pub const CONST_STRING_JUMBO: i32 = 0x1b;
    pub const CONST_CLASS: i32 = 0x1c;
    pub const MONITOR_ENTER: i32 = 0x1d;
    pub const MONITOR_EXIT: i32 = 0x1e;
    pub const CHECK_CAST: i32 = 0x1f;
    pub const INSTANCE_OF: i32 = 0x20;
    pub const ARRAY_LENGTH: i32 = 0x21;
    pub const NEW_INSTANCE: i32 = 0x22;
    pub const NEW_ARRAY: i32 = 0x23;
    pub const FILLED_NEW_ARRAY: i32 = 0x24;
    pub const FILLED_NEW_ARRAY_RANGE: i32 = 0x25;
    pub const FILL_ARRAY_DATA: i32 = 0x26;
    pub const THROW: i32 = 0x27;
    pub const GOTO: i32 = 0x28;
    pub const GOTO_16: i32 = 0x29;
    pub const GOTO_32: i32 = 0x2a;
    pub const PACKED_SWITCH: i32 = 0x2b;
    pub const SPARSE_SWITCH: i32 = 0x2c;
    pub const CMPL_FLOAT: i32 = 0x2d;
    pub const CMPG_FLOAT: i32 = 0x2e;
    pub const CMPL_DOUBLE: i32 = 0x2f;
    pub const CMPG_DOUBLE: i32 = 0x30;
    pub const CMP_LONG: i32 = 0x31;
    pub const IF_EQ: i32 = 0x32;
    pub const IF_NE: i32 = 0x33;
    pub const IF_LT: i32 = 0x34;
    pub const IF_GE: i32 = 0x35;
    pub const IF_GT: i32 = 0x36;
    pub const IF_LE: i32 = 0x37;
    pub const IF_EQZ: i32 = 0x38;
    pub const IF_NEZ: i32 = 0x39;
    pub const IF_LTZ: i32 = 0x3a;
    pub const IF_GEZ: i32 = 0x3b;
    pub const IF_GTZ: i32 = 0x3c;
    pub const IF_LEZ: i32 = 0x3d;
    pub const AGET: i32 = 0x44;
    pub const AGET_WIDE: i32 = 0x45;
    pub const AGET_OBJECT: i32 = 0x46;
    pub const AGET_BOOLEAN: i32 = 0x47;
    pub const AGET_BYTE: i32 = 0x48;
    pub const AGET_CHAR: i32 = 0x49;
    pub const AGET_SHORT: i32 = 0x4a;
    pub const APUT: i32 = 0x4b;
    pub const APUT_WIDE: i32 = 0x4c;
    pub const APUT_OBJECT: i32 = 0x4d;
    pub const APUT_BOOLEAN: i32 = 0x4e;
    pub const APUT_BYTE: i32 = 0x4f;
    pub const APUT_CHAR: i32 = 0x50;
    pub const APUT_SHORT: i32 = 0x51;
    pub const IGET: i32 = 0x52;
    pub const IGET_WIDE: i32 = 0x53;
    pub const IGET_OBJECT: i32 = 0x54;
    pub const IGET_BOOLEAN: i32 = 0x55;
    pub const IGET_BYTE: i32 = 0x56;
    pub const IGET_CHAR: i32 = 0x57;
    pub const IGET_SHORT: i32 = 0x58;
    pub const IPUT: i32 = 0x59;
    pub const IPUT_WIDE: i32 = 0x5a;
    pub const IPUT_OBJECT: i32 = 0x5b;
    pub const IPUT_BOOLEAN: i32 = 0x5c;
    pub const IPUT_BYTE: i32 = 0x5d;
    pub const IPUT_CHAR: i32 = 0x5e;
    pub const IPUT_SHORT: i32 = 0x5f;
    pub const SGET: i32 = 0x60;
    pub const SGET_WIDE: i32 = 0x61;
    pub const SGET_OBJECT: i32 = 0x62;
    pub const SGET_BOOLEAN: i32 = 0x63;
    pub const SGET_BYTE: i32 = 0x64;
    pub const SGET_CHAR: i32 = 0x65;
    pub const SGET_SHORT: i32 = 0x66;
    pub const SPUT: i32 = 0x67;
    pub const SPUT_WIDE: i32 = 0x68;
    pub const SPUT_OBJECT: i32 = 0x69;
    pub const SPUT_BOOLEAN: i32 = 0x6a;
    pub const SPUT_BYTE: i32 = 0x6b;
    pub const SPUT_CHAR: i32 = 0x6c;
    pub const SPUT_SHORT: i32 = 0x6d;
    pub const INVOKE_VIRTUAL: i32 = 0x6e;
    pub const INVOKE_SUPER: i32 = 0x6f;
    pub const INVOKE_DIRECT: i32 = 0x70;
    pub const INVOKE_STATIC: i32 = 0x71;
    pub const INVOKE_INTERFACE: i32 = 0x72;
    pub const INVOKE_VIRTUAL_RANGE: i32 = 0x74;
    pub const INVOKE_SUPER_RANGE: i32 = 0x75;
    pub const INVOKE_DIRECT_RANGE: i32 = 0x76;
    pub const INVOKE_STATIC_RANGE: i32 = 0x77;
    pub const INVOKE_INTERFACE_RANGE: i32 = 0x78;
    pub const NEG_INT: i32 = 0x7b;
    pub const NOT_INT: i32 = 0x7c;
    pub const NEG_LONG: i32 = 0x7d;
    pub const NOT_LONG: i32 = 0x7e;
    pub const NEG_FLOAT: i32 = 0x7f;
    pub const NEG_DOUBLE: i32 = 0x80;
    pub const INT_TO_LONG: i32 = 0x81;
    pub const INT_TO_FLOAT: i32 = 0x82;
    pub const INT_TO_DOUBLE: i32 = 0x83;
    pub const LONG_TO_INT: i32 = 0x84;
    pub const LONG_TO_FLOAT: i32 = 0x85;
    pub const LONG_TO_DOUBLE: i32 = 0x86;
    pub const FLOAT_TO_INT: i32 = 0x87;
    pub const FLOAT_TO_LONG: i32 = 0x88;
    pub const FLOAT_TO_DOUBLE: i32 = 0x89;
    pub const DOUBLE_TO_INT: i32 = 0x8a;
    pub const DOUBLE_TO_LONG: i32 = 0x8b;
    pub const DOUBLE_TO_FLOAT: i32 = 0x8c;
    pub const INT_TO_BYTE: i32 = 0x8d;
    pub const INT_TO_CHAR: i32 = 0x8e;
    pub const INT_TO_SHORT: i32 = 0x8f;
    pub const ADD_INT: i32 = 0x90;
    pub const SUB_INT: i32 = 0x91;
    pub const MUL_INT: i32 = 0x92;
    pub const DIV_INT: i32 = 0x93;
    pub const REM_INT: i32 = 0x94;
    pub const AND_INT: i32 = 0x95;
    pub const OR_INT: i32 = 0x96;
    pub const XOR_INT: i32 = 0x97;
    pub const SHL_INT: i32 = 0x98;
    pub const SHR_INT: i32 = 0x99;
    pub const USHR_INT: i32 = 0x9a;
    pub const ADD_LONG: i32 = 0x9b;
    pub const SUB_LONG: i32 = 0x9c;
    pub const MUL_LONG: i32 = 0x9d;
    pub const DIV_LONG: i32 = 0x9e;
    pub const REM_LONG: i32 = 0x9f;
    pub const AND_LONG: i32 = 0xa0;
    pub const OR_LONG: i32 = 0xa1;
    pub const XOR_LONG: i32 = 0xa2;
    pub const SHL_LONG: i32 = 0xa3;
    pub const SHR_LONG: i32 = 0xa4;
    pub const USHR_LONG: i32 = 0xa5;
    pub const ADD_FLOAT: i32 = 0xa6;
    pub const SUB_FLOAT: i32 = 0xa7;
    pub const MUL_FLOAT: i32 = 0xa8;
    pub const DIV_FLOAT: i32 = 0xa9;
    pub const REM_FLOAT: i32 = 0xaa;
    pub const ADD_DOUBLE: i32 = 0xab;
    pub const SUB_DOUBLE: i32 = 0xac;
    pub const MUL_DOUBLE: i32 = 0xad;
    pub const DIV_DOUBLE: i32 = 0xae;
    pub const REM_DOUBLE: i32 = 0xaf;
    pub const ADD_INT_2ADDR: i32 = 0xb0;
    pub const SUB_INT_2ADDR: i32 = 0xb1;
    pub const MUL_INT_2ADDR: i32 = 0xb2;
    pub const DIV_INT_2ADDR: i32 = 0xb3;
    pub const REM_INT_2ADDR: i32 = 0xb4;
    pub const AND_INT_2ADDR: i32 = 0xb5;
    pub const OR_INT_2ADDR: i32 = 0xb6;
    pub const XOR_INT_2ADDR: i32 = 0xb7;
    pub const SHL_INT_2ADDR: i32 = 0xb8;
    pub const SHR_INT_2ADDR: i32 = 0xb9;
    pub const USHR_INT_2ADDR: i32 = 0xba;
    pub const ADD_LONG_2ADDR: i32 = 0xbb;
    pub const SUB_LONG_2ADDR: i32 = 0xbc;
    pub const MUL_LONG_2ADDR: i32 = 0xbd;
    pub const DIV_LONG_2ADDR: i32 = 0xbe;
    pub const REM_LONG_2ADDR: i32 = 0xbf;
    pub const AND_LONG_2ADDR: i32 = 0xc0;
    pub const OR_LONG_2ADDR: i32 = 0xc1;
    pub const XOR_LONG_2ADDR: i32 = 0xc2;
    pub const SHL_LONG_2ADDR: i32 = 0xc3;
    pub const SHR_LONG_2ADDR: i32 = 0xc4;
    pub const USHR_LONG_2ADDR: i32 = 0xc5;
    pub const ADD_FLOAT_2ADDR: i32 = 0xc6;
    pub const SUB_FLOAT_2ADDR: i32 = 0xc7;
    pub const MUL_FLOAT_2ADDR: i32 = 0xc8;
    pub const DIV_FLOAT_2ADDR: i32 = 0xc9;
    pub const REM_FLOAT_2ADDR: i32 = 0xca;
    pub const ADD_DOUBLE_2ADDR: i32 = 0xcb;
    pub const SUB_DOUBLE_2ADDR: i32 = 0xcc;
    pub const MUL_DOUBLE_2ADDR: i32 = 0xcd;
    pub const DIV_DOUBLE_2ADDR: i32 = 0xce;
    pub const REM_DOUBLE_2ADDR: i32 = 0xcf;
    pub const ADD_INT_LIT16: i32 = 0xd0;
    pub const RSUB_INT: i32 = 0xd1;
    pub const MUL_INT_LIT16: i32 = 0xd2;
    pub const DIV_INT_LIT16: i32 = 0xd3;
    pub const REM_INT_LIT16: i32 = 0xd4;
    pub const AND_INT_LIT16: i32 = 0xd5;
    pub const OR_INT_LIT16: i32 = 0xd6;
    pub const XOR_INT_LIT16: i32 = 0xd7;
    pub const ADD_INT_LIT8: i32 = 0xd8;
    pub const RSUB_INT_LIT8: i32 = 0xd9;
    pub const MUL_INT_LIT8: i32 = 0xda;
    pub const DIV_INT_LIT8: i32 = 0xdb;
    pub const REM_INT_LIT8: i32 = 0xdc;
    pub const AND_INT_LIT8: i32 = 0xdd;
    pub const OR_INT_LIT8: i32 = 0xde;
    pub const XOR_INT_LIT8: i32 = 0xdf;
    pub const SHL_INT_LIT8: i32 = 0xe0;
    pub const SHR_INT_LIT8: i32 = 0xe1;
    pub const USHR_INT_LIT8: i32 = 0xe2;
    pub const INVOKE_POLYMORPHIC: i32 = 0xfa;
    pub const INVOKE_POLYMORPHIC_RANGE: i32 = 0xfb;
    pub const INVOKE_CUSTOM: i32 = 0xfc;
    pub const INVOKE_CUSTOM_RANGE: i32 = 0xfd;
    pub const CONST_METHOD_HANDLE: i32 = 0xfe;
    pub const CONST_METHOD_TYPE: i32 = 0xff;
    pub const PACKED_SWITCH_PAYLOAD: i32 = 0x100;
    pub const SPARSE_SWITCH_PAYLOAD: i32 = 0x200;
    pub const FILL_ARRAY_DATA_PAYLOAD: i32 = 0x300;
    pub fn new(&self)    {
    }
    pub fn isValidShape(opcode: i32) -> boolean    {
        if opcode<Opcodes::SPECIAL_FORMAT        {
            return false;
        }        else         if opcode==Opcodes::SPECIAL_FORMAT        {
            return true;
        }        
        let lowByte: i32 = opcode&0xff;
        if (lowByte==0)||(lowByte==0xff)        {
            return true;
        }        
        return (opcode&0xff00)==0;
    }
    pub fn extractOpcodeFromUnit(opcodeUnit: i32) -> i32    {
        let lowByte: i32 = opcodeUnit&0xff;
        return if ((lowByte==0)||(lowByte==0xff)) { opcodeUnit } else { lowByte };
            }
}
