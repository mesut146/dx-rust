use crate::helper;
use crate::com::android::dx::io::Opcodes;
use crate::com::android::dx::io::IndexType;
use crate::com::android::dx::io::OpcodeInfo::Info;
use crate::com::android::dx::util::Hex;
use crate::com::android::dx::io::instructions::InstructionCodec;

let static INFO: Option<Vec<Info>> = Node;
let static SPECIAL_FORMAT: Info = Info::new(Opcodes::SPECIAL_FORMAT, "<special>", &InstructionCodec::FORMAT_00X, &IndexType::NONE);
let static PACKED_SWITCH_PAYLOAD: Info = Info::new(Opcodes::PACKED_SWITCH_PAYLOAD, "packed-switch-payload", &InstructionCodec::FORMAT_PACKED_SWITCH_PAYLOAD, &IndexType::NONE);
let static SPARSE_SWITCH_PAYLOAD: Info = Info::new(Opcodes::SPARSE_SWITCH_PAYLOAD, "sparse-switch-payload", &InstructionCodec::FORMAT_SPARSE_SWITCH_PAYLOAD, &IndexType::NONE);
let static FILL_ARRAY_DATA_PAYLOAD: Info = Info::new(Opcodes::FILL_ARRAY_DATA_PAYLOAD, "fill-array-data-payload", &InstructionCodec::FORMAT_FILL_ARRAY_DATA_PAYLOAD, &IndexType::NONE);
let static NOP: Info = Info::new(Opcodes::NOP, "nop", &InstructionCodec::FORMAT_10X, &IndexType::NONE);
let static MOVE: Info = Info::new(Opcodes::MOVE, "move", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MOVE_FROM16: Info = Info::new(Opcodes::MOVE_FROM16, "move/from16", &InstructionCodec::FORMAT_22X, &IndexType::NONE);
let static MOVE_16: Info = Info::new(Opcodes::MOVE_16, "move/16", &InstructionCodec::FORMAT_32X, &IndexType::NONE);
let static MOVE_WIDE: Info = Info::new(Opcodes::MOVE_WIDE, "move-wide", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MOVE_WIDE_FROM16: Info = Info::new(Opcodes::MOVE_WIDE_FROM16, "move-wide/from16", &InstructionCodec::FORMAT_22X, &IndexType::NONE);
let static MOVE_WIDE_16: Info = Info::new(Opcodes::MOVE_WIDE_16, "move-wide/16", &InstructionCodec::FORMAT_32X, &IndexType::NONE);
let static MOVE_OBJECT: Info = Info::new(Opcodes::MOVE_OBJECT, "move-object", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MOVE_OBJECT_FROM16: Info = Info::new(Opcodes::MOVE_OBJECT_FROM16, "move-object/from16", &InstructionCodec::FORMAT_22X, &IndexType::NONE);
let static MOVE_OBJECT_16: Info = Info::new(Opcodes::MOVE_OBJECT_16, "move-object/16", &InstructionCodec::FORMAT_32X, &IndexType::NONE);
let static MOVE_RESULT: Info = Info::new(Opcodes::MOVE_RESULT, "move-result", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static MOVE_RESULT_WIDE: Info = Info::new(Opcodes::MOVE_RESULT_WIDE, "move-result-wide", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static MOVE_RESULT_OBJECT: Info = Info::new(Opcodes::MOVE_RESULT_OBJECT, "move-result-object", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static MOVE_EXCEPTION: Info = Info::new(Opcodes::MOVE_EXCEPTION, "move-exception", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static RETURN_VOID: Info = Info::new(Opcodes::RETURN_VOID, "return-void", &InstructionCodec::FORMAT_10X, &IndexType::NONE);
let static RETURN: Info = Info::new(Opcodes::RETURN, "return", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static RETURN_WIDE: Info = Info::new(Opcodes::RETURN_WIDE, "return-wide", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static RETURN_OBJECT: Info = Info::new(Opcodes::RETURN_OBJECT, "return-object", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static CONST_4: Info = Info::new(Opcodes::CONST_4, "const/4", &InstructionCodec::FORMAT_11N, &IndexType::NONE);
let static CONST_16: Info = Info::new(Opcodes::CONST_16, "const/16", &InstructionCodec::FORMAT_21S, &IndexType::NONE);
let static CONST: Info = Info::new(Opcodes::CONST, "const", &InstructionCodec::FORMAT_31I, &IndexType::NONE);
let static CONST_HIGH16: Info = Info::new(Opcodes::CONST_HIGH16, "const/high16", &InstructionCodec::FORMAT_21H, &IndexType::NONE);
let static CONST_WIDE_16: Info = Info::new(Opcodes::CONST_WIDE_16, "const-wide/16", &InstructionCodec::FORMAT_21S, &IndexType::NONE);
let static CONST_WIDE_32: Info = Info::new(Opcodes::CONST_WIDE_32, "const-wide/32", &InstructionCodec::FORMAT_31I, &IndexType::NONE);
let static CONST_WIDE: Info = Info::new(Opcodes::CONST_WIDE, "const-wide", &InstructionCodec::FORMAT_51L, &IndexType::NONE);
let static CONST_WIDE_HIGH16: Info = Info::new(Opcodes::CONST_WIDE_HIGH16, "const-wide/high16", &InstructionCodec::FORMAT_21H, &IndexType::NONE);
let static CONST_STRING: Info = Info::new(Opcodes::CONST_STRING, "const-string", &InstructionCodec::FORMAT_21C, &IndexType::STRING_REF);
let static CONST_STRING_JUMBO: Info = Info::new(Opcodes::CONST_STRING_JUMBO, "const-string/jumbo", &InstructionCodec::FORMAT_31C, &IndexType::STRING_REF);
let static CONST_CLASS: Info = Info::new(Opcodes::CONST_CLASS, "const-class", &InstructionCodec::FORMAT_21C, &IndexType::TYPE_REF);
let static MONITOR_ENTER: Info = Info::new(Opcodes::MONITOR_ENTER, "monitor-enter", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static MONITOR_EXIT: Info = Info::new(Opcodes::MONITOR_EXIT, "monitor-exit", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static CHECK_CAST: Info = Info::new(Opcodes::CHECK_CAST, "check-cast", &InstructionCodec::FORMAT_21C, &IndexType::TYPE_REF);
let static INSTANCE_OF: Info = Info::new(Opcodes::INSTANCE_OF, "instance-of", &InstructionCodec::FORMAT_22C, &IndexType::TYPE_REF);
let static ARRAY_LENGTH: Info = Info::new(Opcodes::ARRAY_LENGTH, "array-length", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NEW_INSTANCE: Info = Info::new(Opcodes::NEW_INSTANCE, "new-instance", &InstructionCodec::FORMAT_21C, &IndexType::TYPE_REF);
let static NEW_ARRAY: Info = Info::new(Opcodes::NEW_ARRAY, "new-array", &InstructionCodec::FORMAT_22C, &IndexType::TYPE_REF);
let static FILLED_NEW_ARRAY: Info = Info::new(Opcodes::FILLED_NEW_ARRAY, "filled-new-array", &InstructionCodec::FORMAT_35C, &IndexType::TYPE_REF);
let static FILLED_NEW_ARRAY_RANGE: Info = Info::new(Opcodes::FILLED_NEW_ARRAY_RANGE, "filled-new-array/range", &InstructionCodec::FORMAT_3RC, &IndexType::TYPE_REF);
let static FILL_ARRAY_DATA: Info = Info::new(Opcodes::FILL_ARRAY_DATA, "fill-array-data", &InstructionCodec::FORMAT_31T, &IndexType::NONE);
let static THROW: Info = Info::new(Opcodes::THROW, "throw", &InstructionCodec::FORMAT_11X, &IndexType::NONE);
let static GOTO: Info = Info::new(Opcodes::GOTO, "goto", &InstructionCodec::FORMAT_10T, &IndexType::NONE);
let static GOTO_16: Info = Info::new(Opcodes::GOTO_16, "goto/16", &InstructionCodec::FORMAT_20T, &IndexType::NONE);
let static GOTO_32: Info = Info::new(Opcodes::GOTO_32, "goto/32", &InstructionCodec::FORMAT_30T, &IndexType::NONE);
let static PACKED_SWITCH: Info = Info::new(Opcodes::PACKED_SWITCH, "packed-switch", &InstructionCodec::FORMAT_31T, &IndexType::NONE);
let static SPARSE_SWITCH: Info = Info::new(Opcodes::SPARSE_SWITCH, "sparse-switch", &InstructionCodec::FORMAT_31T, &IndexType::NONE);
let static CMPL_FLOAT: Info = Info::new(Opcodes::CMPL_FLOAT, "cmpl-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static CMPG_FLOAT: Info = Info::new(Opcodes::CMPG_FLOAT, "cmpg-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static CMPL_DOUBLE: Info = Info::new(Opcodes::CMPL_DOUBLE, "cmpl-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static CMPG_DOUBLE: Info = Info::new(Opcodes::CMPG_DOUBLE, "cmpg-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static CMP_LONG: Info = Info::new(Opcodes::CMP_LONG, "cmp-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static IF_EQ: Info = Info::new(Opcodes::IF_EQ, "if-eq", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_NE: Info = Info::new(Opcodes::IF_NE, "if-ne", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_LT: Info = Info::new(Opcodes::IF_LT, "if-lt", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_GE: Info = Info::new(Opcodes::IF_GE, "if-ge", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_GT: Info = Info::new(Opcodes::IF_GT, "if-gt", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_LE: Info = Info::new(Opcodes::IF_LE, "if-le", &InstructionCodec::FORMAT_22T, &IndexType::NONE);
let static IF_EQZ: Info = Info::new(Opcodes::IF_EQZ, "if-eqz", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static IF_NEZ: Info = Info::new(Opcodes::IF_NEZ, "if-nez", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static IF_LTZ: Info = Info::new(Opcodes::IF_LTZ, "if-ltz", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static IF_GEZ: Info = Info::new(Opcodes::IF_GEZ, "if-gez", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static IF_GTZ: Info = Info::new(Opcodes::IF_GTZ, "if-gtz", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static IF_LEZ: Info = Info::new(Opcodes::IF_LEZ, "if-lez", &InstructionCodec::FORMAT_21T, &IndexType::NONE);
let static AGET: Info = Info::new(Opcodes::AGET, "aget", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_WIDE: Info = Info::new(Opcodes::AGET_WIDE, "aget-wide", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_OBJECT: Info = Info::new(Opcodes::AGET_OBJECT, "aget-object", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_BOOLEAN: Info = Info::new(Opcodes::AGET_BOOLEAN, "aget-boolean", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_BYTE: Info = Info::new(Opcodes::AGET_BYTE, "aget-byte", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_CHAR: Info = Info::new(Opcodes::AGET_CHAR, "aget-char", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AGET_SHORT: Info = Info::new(Opcodes::AGET_SHORT, "aget-short", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT: Info = Info::new(Opcodes::APUT, "aput", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_WIDE: Info = Info::new(Opcodes::APUT_WIDE, "aput-wide", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_OBJECT: Info = Info::new(Opcodes::APUT_OBJECT, "aput-object", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_BOOLEAN: Info = Info::new(Opcodes::APUT_BOOLEAN, "aput-boolean", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_BYTE: Info = Info::new(Opcodes::APUT_BYTE, "aput-byte", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_CHAR: Info = Info::new(Opcodes::APUT_CHAR, "aput-char", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static APUT_SHORT: Info = Info::new(Opcodes::APUT_SHORT, "aput-short", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static IGET: Info = Info::new(Opcodes::IGET, "iget", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_WIDE: Info = Info::new(Opcodes::IGET_WIDE, "iget-wide", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_OBJECT: Info = Info::new(Opcodes::IGET_OBJECT, "iget-object", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_BOOLEAN: Info = Info::new(Opcodes::IGET_BOOLEAN, "iget-boolean", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_BYTE: Info = Info::new(Opcodes::IGET_BYTE, "iget-byte", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_CHAR: Info = Info::new(Opcodes::IGET_CHAR, "iget-char", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IGET_SHORT: Info = Info::new(Opcodes::IGET_SHORT, "iget-short", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT: Info = Info::new(Opcodes::IPUT, "iput", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_WIDE: Info = Info::new(Opcodes::IPUT_WIDE, "iput-wide", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_OBJECT: Info = Info::new(Opcodes::IPUT_OBJECT, "iput-object", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_BOOLEAN: Info = Info::new(Opcodes::IPUT_BOOLEAN, "iput-boolean", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_BYTE: Info = Info::new(Opcodes::IPUT_BYTE, "iput-byte", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_CHAR: Info = Info::new(Opcodes::IPUT_CHAR, "iput-char", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static IPUT_SHORT: Info = Info::new(Opcodes::IPUT_SHORT, "iput-short", &InstructionCodec::FORMAT_22C, &IndexType::FIELD_REF);
let static SGET: Info = Info::new(Opcodes::SGET, "sget", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_WIDE: Info = Info::new(Opcodes::SGET_WIDE, "sget-wide", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_OBJECT: Info = Info::new(Opcodes::SGET_OBJECT, "sget-object", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_BOOLEAN: Info = Info::new(Opcodes::SGET_BOOLEAN, "sget-boolean", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_BYTE: Info = Info::new(Opcodes::SGET_BYTE, "sget-byte", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_CHAR: Info = Info::new(Opcodes::SGET_CHAR, "sget-char", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SGET_SHORT: Info = Info::new(Opcodes::SGET_SHORT, "sget-short", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT: Info = Info::new(Opcodes::SPUT, "sput", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_WIDE: Info = Info::new(Opcodes::SPUT_WIDE, "sput-wide", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_OBJECT: Info = Info::new(Opcodes::SPUT_OBJECT, "sput-object", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_BOOLEAN: Info = Info::new(Opcodes::SPUT_BOOLEAN, "sput-boolean", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_BYTE: Info = Info::new(Opcodes::SPUT_BYTE, "sput-byte", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_CHAR: Info = Info::new(Opcodes::SPUT_CHAR, "sput-char", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static SPUT_SHORT: Info = Info::new(Opcodes::SPUT_SHORT, "sput-short", &InstructionCodec::FORMAT_21C, &IndexType::FIELD_REF);
let static INVOKE_VIRTUAL: Info = Info::new(Opcodes::INVOKE_VIRTUAL, "invoke-virtual", &InstructionCodec::FORMAT_35C, &IndexType::METHOD_REF);
let static INVOKE_SUPER: Info = Info::new(Opcodes::INVOKE_SUPER, "invoke-super", &InstructionCodec::FORMAT_35C, &IndexType::METHOD_REF);
let static INVOKE_DIRECT: Info = Info::new(Opcodes::INVOKE_DIRECT, "invoke-direct", &InstructionCodec::FORMAT_35C, &IndexType::METHOD_REF);
let static INVOKE_STATIC: Info = Info::new(Opcodes::INVOKE_STATIC, "invoke-static", &InstructionCodec::FORMAT_35C, &IndexType::METHOD_REF);
let static INVOKE_INTERFACE: Info = Info::new(Opcodes::INVOKE_INTERFACE, "invoke-interface", &InstructionCodec::FORMAT_35C, &IndexType::METHOD_REF);
let static INVOKE_VIRTUAL_RANGE: Info = Info::new(Opcodes::INVOKE_VIRTUAL_RANGE, "invoke-virtual/range", &InstructionCodec::FORMAT_3RC, &IndexType::METHOD_REF);
let static INVOKE_SUPER_RANGE: Info = Info::new(Opcodes::INVOKE_SUPER_RANGE, "invoke-super/range", &InstructionCodec::FORMAT_3RC, &IndexType::METHOD_REF);
let static INVOKE_DIRECT_RANGE: Info = Info::new(Opcodes::INVOKE_DIRECT_RANGE, "invoke-direct/range", &InstructionCodec::FORMAT_3RC, &IndexType::METHOD_REF);
let static INVOKE_STATIC_RANGE: Info = Info::new(Opcodes::INVOKE_STATIC_RANGE, "invoke-static/range", &InstructionCodec::FORMAT_3RC, &IndexType::METHOD_REF);
let static INVOKE_INTERFACE_RANGE: Info = Info::new(Opcodes::INVOKE_INTERFACE_RANGE, "invoke-interface/range", &InstructionCodec::FORMAT_3RC, &IndexType::METHOD_REF);
let static NEG_INT: Info = Info::new(Opcodes::NEG_INT, "neg-int", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NOT_INT: Info = Info::new(Opcodes::NOT_INT, "not-int", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NEG_LONG: Info = Info::new(Opcodes::NEG_LONG, "neg-long", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NOT_LONG: Info = Info::new(Opcodes::NOT_LONG, "not-long", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NEG_FLOAT: Info = Info::new(Opcodes::NEG_FLOAT, "neg-float", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static NEG_DOUBLE: Info = Info::new(Opcodes::NEG_DOUBLE, "neg-double", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_LONG: Info = Info::new(Opcodes::INT_TO_LONG, "int-to-long", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_FLOAT: Info = Info::new(Opcodes::INT_TO_FLOAT, "int-to-float", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_DOUBLE: Info = Info::new(Opcodes::INT_TO_DOUBLE, "int-to-double", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static LONG_TO_INT: Info = Info::new(Opcodes::LONG_TO_INT, "long-to-int", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static LONG_TO_FLOAT: Info = Info::new(Opcodes::LONG_TO_FLOAT, "long-to-float", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static LONG_TO_DOUBLE: Info = Info::new(Opcodes::LONG_TO_DOUBLE, "long-to-double", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static FLOAT_TO_INT: Info = Info::new(Opcodes::FLOAT_TO_INT, "float-to-int", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static FLOAT_TO_LONG: Info = Info::new(Opcodes::FLOAT_TO_LONG, "float-to-long", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static FLOAT_TO_DOUBLE: Info = Info::new(Opcodes::FLOAT_TO_DOUBLE, "float-to-double", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DOUBLE_TO_INT: Info = Info::new(Opcodes::DOUBLE_TO_INT, "double-to-int", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DOUBLE_TO_LONG: Info = Info::new(Opcodes::DOUBLE_TO_LONG, "double-to-long", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DOUBLE_TO_FLOAT: Info = Info::new(Opcodes::DOUBLE_TO_FLOAT, "double-to-float", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_BYTE: Info = Info::new(Opcodes::INT_TO_BYTE, "int-to-byte", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_CHAR: Info = Info::new(Opcodes::INT_TO_CHAR, "int-to-char", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static INT_TO_SHORT: Info = Info::new(Opcodes::INT_TO_SHORT, "int-to-short", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static ADD_INT: Info = Info::new(Opcodes::ADD_INT, "add-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SUB_INT: Info = Info::new(Opcodes::SUB_INT, "sub-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static MUL_INT: Info = Info::new(Opcodes::MUL_INT, "mul-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static DIV_INT: Info = Info::new(Opcodes::DIV_INT, "div-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static REM_INT: Info = Info::new(Opcodes::REM_INT, "rem-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AND_INT: Info = Info::new(Opcodes::AND_INT, "and-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static OR_INT: Info = Info::new(Opcodes::OR_INT, "or-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static XOR_INT: Info = Info::new(Opcodes::XOR_INT, "xor-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SHL_INT: Info = Info::new(Opcodes::SHL_INT, "shl-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SHR_INT: Info = Info::new(Opcodes::SHR_INT, "shr-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static USHR_INT: Info = Info::new(Opcodes::USHR_INT, "ushr-int", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static ADD_LONG: Info = Info::new(Opcodes::ADD_LONG, "add-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SUB_LONG: Info = Info::new(Opcodes::SUB_LONG, "sub-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static MUL_LONG: Info = Info::new(Opcodes::MUL_LONG, "mul-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static DIV_LONG: Info = Info::new(Opcodes::DIV_LONG, "div-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static REM_LONG: Info = Info::new(Opcodes::REM_LONG, "rem-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static AND_LONG: Info = Info::new(Opcodes::AND_LONG, "and-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static OR_LONG: Info = Info::new(Opcodes::OR_LONG, "or-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static XOR_LONG: Info = Info::new(Opcodes::XOR_LONG, "xor-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SHL_LONG: Info = Info::new(Opcodes::SHL_LONG, "shl-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SHR_LONG: Info = Info::new(Opcodes::SHR_LONG, "shr-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static USHR_LONG: Info = Info::new(Opcodes::USHR_LONG, "ushr-long", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static ADD_FLOAT: Info = Info::new(Opcodes::ADD_FLOAT, "add-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SUB_FLOAT: Info = Info::new(Opcodes::SUB_FLOAT, "sub-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static MUL_FLOAT: Info = Info::new(Opcodes::MUL_FLOAT, "mul-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static DIV_FLOAT: Info = Info::new(Opcodes::DIV_FLOAT, "div-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static REM_FLOAT: Info = Info::new(Opcodes::REM_FLOAT, "rem-float", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static ADD_DOUBLE: Info = Info::new(Opcodes::ADD_DOUBLE, "add-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static SUB_DOUBLE: Info = Info::new(Opcodes::SUB_DOUBLE, "sub-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static MUL_DOUBLE: Info = Info::new(Opcodes::MUL_DOUBLE, "mul-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static DIV_DOUBLE: Info = Info::new(Opcodes::DIV_DOUBLE, "div-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static REM_DOUBLE: Info = Info::new(Opcodes::REM_DOUBLE, "rem-double", &InstructionCodec::FORMAT_23X, &IndexType::NONE);
let static ADD_INT_2ADDR: Info = Info::new(Opcodes::ADD_INT_2ADDR, "add-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SUB_INT_2ADDR: Info = Info::new(Opcodes::SUB_INT_2ADDR, "sub-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MUL_INT_2ADDR: Info = Info::new(Opcodes::MUL_INT_2ADDR, "mul-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DIV_INT_2ADDR: Info = Info::new(Opcodes::DIV_INT_2ADDR, "div-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static REM_INT_2ADDR: Info = Info::new(Opcodes::REM_INT_2ADDR, "rem-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static AND_INT_2ADDR: Info = Info::new(Opcodes::AND_INT_2ADDR, "and-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static OR_INT_2ADDR: Info = Info::new(Opcodes::OR_INT_2ADDR, "or-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static XOR_INT_2ADDR: Info = Info::new(Opcodes::XOR_INT_2ADDR, "xor-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SHL_INT_2ADDR: Info = Info::new(Opcodes::SHL_INT_2ADDR, "shl-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SHR_INT_2ADDR: Info = Info::new(Opcodes::SHR_INT_2ADDR, "shr-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static USHR_INT_2ADDR: Info = Info::new(Opcodes::USHR_INT_2ADDR, "ushr-int/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static ADD_LONG_2ADDR: Info = Info::new(Opcodes::ADD_LONG_2ADDR, "add-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SUB_LONG_2ADDR: Info = Info::new(Opcodes::SUB_LONG_2ADDR, "sub-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MUL_LONG_2ADDR: Info = Info::new(Opcodes::MUL_LONG_2ADDR, "mul-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DIV_LONG_2ADDR: Info = Info::new(Opcodes::DIV_LONG_2ADDR, "div-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static REM_LONG_2ADDR: Info = Info::new(Opcodes::REM_LONG_2ADDR, "rem-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static AND_LONG_2ADDR: Info = Info::new(Opcodes::AND_LONG_2ADDR, "and-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static OR_LONG_2ADDR: Info = Info::new(Opcodes::OR_LONG_2ADDR, "or-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static XOR_LONG_2ADDR: Info = Info::new(Opcodes::XOR_LONG_2ADDR, "xor-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SHL_LONG_2ADDR: Info = Info::new(Opcodes::SHL_LONG_2ADDR, "shl-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SHR_LONG_2ADDR: Info = Info::new(Opcodes::SHR_LONG_2ADDR, "shr-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static USHR_LONG_2ADDR: Info = Info::new(Opcodes::USHR_LONG_2ADDR, "ushr-long/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static ADD_FLOAT_2ADDR: Info = Info::new(Opcodes::ADD_FLOAT_2ADDR, "add-float/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SUB_FLOAT_2ADDR: Info = Info::new(Opcodes::SUB_FLOAT_2ADDR, "sub-float/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MUL_FLOAT_2ADDR: Info = Info::new(Opcodes::MUL_FLOAT_2ADDR, "mul-float/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DIV_FLOAT_2ADDR: Info = Info::new(Opcodes::DIV_FLOAT_2ADDR, "div-float/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static REM_FLOAT_2ADDR: Info = Info::new(Opcodes::REM_FLOAT_2ADDR, "rem-float/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static ADD_DOUBLE_2ADDR: Info = Info::new(Opcodes::ADD_DOUBLE_2ADDR, "add-double/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static SUB_DOUBLE_2ADDR: Info = Info::new(Opcodes::SUB_DOUBLE_2ADDR, "sub-double/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static MUL_DOUBLE_2ADDR: Info = Info::new(Opcodes::MUL_DOUBLE_2ADDR, "mul-double/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static DIV_DOUBLE_2ADDR: Info = Info::new(Opcodes::DIV_DOUBLE_2ADDR, "div-double/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static REM_DOUBLE_2ADDR: Info = Info::new(Opcodes::REM_DOUBLE_2ADDR, "rem-double/2addr", &InstructionCodec::FORMAT_12X, &IndexType::NONE);
let static ADD_INT_LIT16: Info = Info::new(Opcodes::ADD_INT_LIT16, "add-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static RSUB_INT: Info = Info::new(Opcodes::RSUB_INT, "rsub-int", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static MUL_INT_LIT16: Info = Info::new(Opcodes::MUL_INT_LIT16, "mul-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static DIV_INT_LIT16: Info = Info::new(Opcodes::DIV_INT_LIT16, "div-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static REM_INT_LIT16: Info = Info::new(Opcodes::REM_INT_LIT16, "rem-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static AND_INT_LIT16: Info = Info::new(Opcodes::AND_INT_LIT16, "and-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static OR_INT_LIT16: Info = Info::new(Opcodes::OR_INT_LIT16, "or-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static XOR_INT_LIT16: Info = Info::new(Opcodes::XOR_INT_LIT16, "xor-int/lit16", &InstructionCodec::FORMAT_22S, &IndexType::NONE);
let static ADD_INT_LIT8: Info = Info::new(Opcodes::ADD_INT_LIT8, "add-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static RSUB_INT_LIT8: Info = Info::new(Opcodes::RSUB_INT_LIT8, "rsub-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static MUL_INT_LIT8: Info = Info::new(Opcodes::MUL_INT_LIT8, "mul-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static DIV_INT_LIT8: Info = Info::new(Opcodes::DIV_INT_LIT8, "div-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static REM_INT_LIT8: Info = Info::new(Opcodes::REM_INT_LIT8, "rem-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static AND_INT_LIT8: Info = Info::new(Opcodes::AND_INT_LIT8, "and-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static OR_INT_LIT8: Info = Info::new(Opcodes::OR_INT_LIT8, "or-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static XOR_INT_LIT8: Info = Info::new(Opcodes::XOR_INT_LIT8, "xor-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static SHL_INT_LIT8: Info = Info::new(Opcodes::SHL_INT_LIT8, "shl-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static SHR_INT_LIT8: Info = Info::new(Opcodes::SHR_INT_LIT8, "shr-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static USHR_INT_LIT8: Info = Info::new(Opcodes::USHR_INT_LIT8, "ushr-int/lit8", &InstructionCodec::FORMAT_22B, &IndexType::NONE);
let static INVOKE_POLYMORPHIC: Info = Info::new(Opcodes::INVOKE_POLYMORPHIC, "invoke-polymorphic", &InstructionCodec::FORMAT_45CC, &IndexType::METHOD_AND_PROTO_REF);
let static INVOKE_POLYMORPHIC_RANGE: Info = Info::new(Opcodes::INVOKE_POLYMORPHIC_RANGE, "invoke-polymorphic/range", &InstructionCodec::FORMAT_4RCC, &IndexType::METHOD_AND_PROTO_REF);
let static INVOKE_CUSTOM: Info = Info::new(Opcodes::INVOKE_CUSTOM, "invoke-custom", &InstructionCodec::FORMAT_35C, &IndexType::CALL_SITE_REF);
let static INVOKE_CUSTOM_RANGE: Info = Info::new(Opcodes::INVOKE_CUSTOM_RANGE, "invoke-custom/range", &InstructionCodec::FORMAT_3RC, &IndexType::CALL_SITE_REF);
let static CONST_METHOD_HANDLE: Info = Info::new(Opcodes::CONST_METHOD_HANDLE, "const-method-handle", &InstructionCodec::FORMAT_21C, &IndexType::METHOD_HANDLE_REF);
let static CONST_METHOD_TYPE: Info = Info::new(Opcodes::CONST_METHOD_TYPE, "const-method-type", &InstructionCodec::FORMAT_21C, &IndexType::PROTO_REF);
struct OpcodeInfo{
}
impl OpcodeInfo{
    pub fn new(&self)    {
    }
    pub fn get(opcode: i32) -> Info    {
        let idx: i32 = opcode-Opcodes::MIN_VALUE;
        try        {
            let result: Info = OpcodeInfo::INFO[idx];
            if result!=None            {
                return result;
            }            
        }        catch(        let ex: ArrayIndexOutOfBoundsException)        {
        }
        throw IllegalArgumentException::new("bogus opcode: "+Hex::u2or4(opcode));
    }
    pub fn getName(opcode: i32) -> String    {
        return OpcodeInfo::get(opcode).getName();
    }
    pub fn getFormat(opcode: i32) -> InstructionCodec    {
        return OpcodeInfo::get(opcode).getFormat();
    }
    pub fn getIndexType(opcode: i32) -> IndexType    {
        return OpcodeInfo::get(opcode).getIndexType();
    }
    pub fn set(opcode: &Info)    {
        let idx: i32 = opcode.getOpcode()-Opcodes::MIN_VALUE;
        OpcodeInfo::INFO[idx]=opcode;
    }
}
